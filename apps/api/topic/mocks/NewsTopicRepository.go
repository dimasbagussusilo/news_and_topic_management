// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewsTopicRepository is an autogenerated mock type for the NewsTopicRepository type
type NewsTopicRepository struct {
	mock.Mock
}

// GetByNewsID provides a mock function with given fields: ctx, newsId
func (_m *NewsTopicRepository) GetByNewsID(ctx context.Context, newsId int64) ([]domain.NewsTopic, error) {
	ret := _m.Called(ctx, newsId)

	if len(ret) == 0 {
		panic("no return value specified for GetByNewsID")
	}

	var r0 []domain.NewsTopic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.NewsTopic, error)); ok {
		return rf(ctx, newsId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.NewsTopic); ok {
		r0 = rf(ctx, newsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NewsTopic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, newsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTopicID provides a mock function with given fields: ctx, topicId
func (_m *NewsTopicRepository) GetByTopicID(ctx context.Context, topicId int64) ([]domain.NewsTopic, error) {
	ret := _m.Called(ctx, topicId)

	if len(ret) == 0 {
		panic("no return value specified for GetByTopicID")
	}

	var r0 []domain.NewsTopic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.NewsTopic, error)); ok {
		return rf(ctx, topicId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.NewsTopic); ok {
		r0 = rf(ctx, topicId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NewsTopic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNewsTopicRepository creates a new instance of NewsTopicRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsTopicRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsTopicRepository {
	mock := &NewsTopicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
